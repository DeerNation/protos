syntax = "proto3";
package dn;
//import "google/protobuf/timestamp.proto";
//import "google/protobuf/empty.proto";
import "protos/model.proto";

service Com {
    /**
     * Subscribe to a channel and receive updates for it
     */
    rpc subscribe(ChannelRequest) returns (stream ActivityChange);
    rpc getPublications(ChannelRequest) returns (dn.model.Publications);
    rpc publish(dn.model.Publication) returns (Response);
//    rpc getSubscriptions(Uid) returns (dn.model.Subscriptions);

    /**
     * Retuns the complete model for the currently authenticated user.
     * The model contains:
     *  - the current actor (including its subscriptions)
     *  - all other Actors
     *  - all public channels
     */
    rpc getModel(Empty) returns (Model);

    /**
     * Returns the complete data needed to show the channels content.
     */
    rpc getChannelModel(ChannelRequest) returns (ChannelModel);

    rpc setFirebaseToken(Token) returns (Response);
}

message Model {
    // the currently logged in Actor
    dn.model.Actor me = 1;
    // all available actors (e.g. for direct messaging)
    repeated dn.model.Actor actors = 2;
    // the public channels
    repeated dn.model.Channel publicChannels = 4;
}

/**
 * The ChannelModel contains:
 *  - allowed actions for current user on channel
 *  - allowed actions for current user on channel activities
 *  - the channels publications
 */
message ChannelModel {
    // publications in this channel
    repeated dn.model.Publication publications = 1;
    // allowed actions of the current user for this channel
    dn.model.AclActions channelActions = 2;
    // allowed actions of the current user for activities in this channel
    dn.model.AclActions activityActions = 3;
}

message Token {
    string newToken = 1;
    string oldToken = 2;
}

message Uid {
    string uid = 1;
}

message Empty {}

message ChannelRequest {
    // UID of the channel
    string uid = 1;
    // channel name (as alternative to the uid)
    string channelId = 2;
    string date = 3;
}

/**
 * Status response from backend
 */
message Response {
    enum Code {
        OK = 0;
        ERROR = 1;
    }
    Code code = 1;
    string message = 2;
}

/**
 * ActivityChange messages are the messages sent in a channel.
 * They contain either an update for an activity or an internal
 * status update for the channel, like a currently writing user state.
 */
message ActivityChange {
    enum Type {
        ADD = 0;
        UPDATE = 1;
        DELETE = 2;
        INTERNAL = 3;
    }
    Type type = 1;
    oneof  content {
        dn.model.Activity activity = 2;
        WritingUser writing = 3;
    }
}

/**
 * User currently writing in channel status.
 */
message WritingUser {
    // user ID
    string uid = 1;
    // true if the user is currently writing, false if he has stopped writing
    bool done = 2;
}