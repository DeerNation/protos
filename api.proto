syntax = "proto3";
package dn;
import "node_modules/protoc-gen-qx/protos/extensions.proto";
import "protos/model.proto";

service Com {
    /**
     * Retuns the complete model for the currently authenticated user.
     * The model contains:
     *  - the current actor (including its subscriptions)
     *  - all other Actors
     *  - all public channels
     *
     * If the user it not logged in only the public channels are returned
     */
    rpc getModel(Empty) returns (stream Model);

    /**
     * Returns the complete data needed to show the channels content.
     */
    rpc getChannelModel(ChannelRequest) returns (ChannelModel);

    rpc setFirebaseToken(Token) returns (Response);

    /**
     * Updates a single property of an object
     */
    rpc updateProperty(PropertyUpdate) returns (Response);


    /**
     * Returns concatenated string with all allowed actions for the given role on the topic
     */
    rpc getAllowedActionsForRole(AclRequest) returns (AclActions);

    // ----------------------------------------------
    // CRUD
    // ----------------------------------------------

    rpc createObject(Object) returns (Response);
    rpc getObject(Uid) returns (Object);
    rpc getObjects(Query) returns (Objects);
    rpc updateObject(Object) returns (Response);
    rpc deleteObject(Object) returns (Response);

    // ----------------------------------------------
    // Misc
    // ----------------------------------------------
}

enum ChangeType {
    ADD = 0;
    UPDATE = 1;
    DELETE = 2;
    REPLACE = 3;
    INTERNAL = 4;
}

message AclRequest {
    string role = 1;
    string topic = 2;
}

message PropertyUpdate {
    string uid = 1;
    repeated string names = 2;
    Object object = 3;
}

message Query {
    string baseName = 1;
    string filter = 2;
    Point location = 3;
    int32 radius = 4;
}

message Point {
    float latitude = 1;
    float longitude = 2;
}

message Objects {
    repeated Object list = 1;
}

message Object {
    ChangeType type = 1;
    oneof content {
        dn.model.Activity activity = 2;
        dn.model.Actor actor = 3;
        dn.model.Channel channel = 4;
        dn.model.Subscription subscription = 5;
        dn.model.Publication publication = 6;
    }
    // reset the values of these proeprties of the Object
    repeated string resetProperties = 7;
}

message Model {
    ChangeType type = 1;
    // the currently logged in Actor
    dn.model.Actor me = 2;
    // all available actors (e.g. for direct messaging)
    repeated dn.model.Actor actors = 3;
    // the public channels
    repeated dn.model.Channel publicChannels = 4;
    // subscriptions of the current user
    repeated dn.model.Subscription subscriptions = 5;
    // change for a single object
    Object object = 6;
}

/**
 * The ChannelModel contains:
 *  - allowed actions for current user on channel
 *  - allowed actions for current user on channel activities
 *  - the channels publications
 */
message ChannelModel {
    ChangeType type = 1;
    // publications in this channel
    repeated dn.model.Publication publications = 2;
    // allowed actions of the current user for this channel
    dn.model.AclActions channelActions = 3;
    // allowed actions of the current user for activities in this channel
    dn.model.AclActions activityActions = 4;
    WritingUser writingUser = 5;
    Object object = 6;
}

message Token {
    string newToken = 1;
    string oldToken = 2;
}

message Uid {
    string uid = 1;
    int32 depth = 2;
}

message Empty {}

message ChannelRequest {
    // UID of the channel
    string uid = 1;
    // channel name (as alternative to the uid)
    string channelId = 2;
    string date = 3 [(qx.date) = true];
    int32 limit = 4;
}

/**
 * Status response from backend
 */
message Response {
    enum Code {
        OK = 0;
        ERROR = 1;
        FORBIDDEN = 2;
    }
    Code code = 1;
    string message = 2;
    map<string, string> uids = 3;
}

/**
 * ActivityChange messages are the messages sent in a channel.
 * They contain either an update for an activity or an internal
 * status update for the channel, like a currently writing user state.
 */
message ActivityChange {
    enum Type {
        ADD = 0;
        UPDATE = 1;
        DELETE = 2;
        INTERNAL = 3;
    }
    Type type = 1;
    oneof  content {
        dn.model.Activity activity = 2;
        WritingUser writing = 3;
    }
}

/**
 * User currently writing in channel status.
 */
message WritingUser {
    // user ID
    string username = 1;
    // true if the user is currently writing, false if he has stopped writing
    bool done = 2;
}